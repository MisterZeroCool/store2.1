Микросервисные приложения

Почему эта тема настолько актуальна?
    Есть у нас некое приложение, пользователь отправляет запрос, наше приложе-
ние его обрабатывает и возвращает ответ.
    Но таких приложение с которым работает один пользователь и в общем достаточно
немного в наше время и рано или поздно количество пользователей которые работают c
нашим приложением начинает серьёзно увеличиваться и количество запросов кото-
рые должны мы с вами обрабатывать начинает серьёзно возрастать.К чему это в конечном
счёте приводит? Ну в какой-то момент мы понимаем что ресурсов для обработки данных
запросов начинает не хватать. Что обычно люди делают когда у них начинает не хватает
ресурсов для того чтобы держать их нагрузку? Они начинают искать какие-то способы Как
повысить мощность системы и самый простой и очевидный - покупаем новый сервер.
У нас вроде бы  начинает все работать быстрее, но количество пользователей опять возра-
стает.И в конечном итоге мы начинаем упираться в потолок возможностей этого сервера и
железа. Такой способ за счёт увеличения мощностижелеза называется ВЕРТИКАЛЬНОЕ
МАСШТАБИРОВАНИЕ СИСТЕМЫ.
    Как решить данную проблему? Немножко подумав мы сделаем вот что, я а давайте
запустим ещё один сервер, установим на него наше приложение.  Немножко усложнением нашу
инфраструктуру, перед нашими серверами поставим ещё один маленький, но юркий сервер, кото-
рый будет называться БАЛАНСИРОВЩИК НАГРУЗКИ, и когда к нам будет приходить очередной запрос,
этот самый балансировщик нагрузки  в зависимости от того насколько каждый из серверов загружен,
будет перенаправлять этот запрос на один из имеющихся у нас серверов.
Приходящие запросы равномерно распределяются. Получается возможность обработки запросов
увеличилась в 2 раза.  И опять у нас всё хорошо, но нагрузка продолжает расти, и количество
пользователей  у нас вновь выросла. Что дальше? Столько у нас денег нет для запуска мощных серверов.
Садимся и ещё раз думаем, Как нам от масштабировать систему так , чтобы бы  приложение функциони-
ровало должным образом? Бросается в глаза то,  что каждое из наших приложений  не монолитно,  а
она состоит из множества различных компонентов.
    Начинаем смотреть как нагрузка распределяется по нашим компонентам которая находится в приложении.
И выясняется что нагрузка  на различные компоненты  приложения растёт в общем-то неравномерно.
Если мы начинаем размножать приложение целиком,  фактическим и размножаем как все компоненты на
которые нагрузка действительно растёт так и те компоненты на которых у нас нагрузка несущественно
растёт или растёт но приложение справляется с этим. Вот именно здесь и кроется идея МИКРОСЕРВИСНОЙ
АРХИТЕКТУРЫ. Когда мы создаём несколько экземпляров компонентов приложения это называется
ГОРИЗОНТАЛЬНОЕ МАСШТАБИРОВАНИЕ СИСТЕМЫ.
    Если мы превратим каждое из компонентов, которые существуют внутри нашего приложения в отдельный
маленький сервис, мы можем размножать их в нужном нам количестве. Ну предположим начала у нас расти
нагрузка на наше приложение.  Мы создаём нужное количество компонентов для распределения нагрузки.
Проходит какое-то время и нагрузка на приложение у нас начинает спадать. И уже такого количества компо-
нентов нам не нужно. И мы те компоненты которые нам уже не нужны, берём и просто останавливаем. За счёт
этого мы работает с приемлемой скоростью, и не потребляем много ресурсов.
      Что представляет из себя микросервисная архитектура?  Мы берём наши монолитное приложение, смотрим
из каких компонентов оно состоит, каждый из этих компонентов реализуем как как отдельная маленькая прило-
жение, запускаем его на отдельном сервере. И при необходимости или при росте нагрузки на этот компонент
мы его в нужном количестве размножаем. Вот примерно в чём идея микросервисной архитектуры!

Важный плюс
-Масштабирование.

Проблемы
1.Быстрая разработка маленьких приложений(сервисов)
2.Подготовка инфраструктуры и запуска большого количества сервисов
3.Конфигурирование приложений
4.Обнаружение сервисов.(Server Discovery)
5.Балансировка нагрузки
6. Мониторинг, логирование, диагностика( Стек инструментов для работы: ELK - Elastic Search, Logstash, Kibana)

 В нашем приложении будем использовать SpringCloud.
 Добавляем в главный pom.xml настройки

<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.3.4.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
</parent>

<properties>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
    <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>
</properties>

   <dependencyManagement>
          <dependencies>
              <dependency>
                  <groupId>org.springframework.cloud</groupId>
                  <artifactId>spring-cloud-dependencies</artifactId>
                  <version>${spring-cloud.version}</version>
                  <type>pom</type>
                  <scope>import</scope>
              </dependency>
          </dependencyManagement>

Прежде чем погружаться в SpringCloud, давайте попробуем какую нибудь из частей
нашего приложения реализовать в виде Сервиса. Самое простое это shop-picture-service
который возвращает картинки по id.
Как это реализовать посредством SpringBoot?
-Создаем модуль
-выбираем SpringInitializr
-назоваем модуль shop-picture-service-app
-ничего не выбираем в dependencies и заканчиваем создание модуля.
-добавляем его в главный pom.xml

Устанавливаем в новый модуль вместо установеленного parent, данную настройку
      <parent>
         <artifactId>store3</artifactId>
         <groupId>ru.alex</groupId>
         <version>1.0-SNAPSHOT</version>
     </parent>

 Добавляем
         <dependency>
             <groupId>ru.alex</groupId>
             <artifactId>shop-picture-service</artifactId>
             <version>1.0-SNAPSHOT</version>
         </dependency>
 Создаем файл application.properties
Копируем и вставляем в него данные из модуля admin-ui, и изменяем путь сервера на /
У нас был модуль shop-picture-service, мы его захотели отмасштабировать, нам данный компонент
нужно запускать в нескольком количестве экземпляров. И для этого нам достаточно создать SpringBoot
приложение и подключить в него модуль shop-picture-service.

(ВАЖНО!!!!ФОТО ДОЛЖНЫ БЫТЬ ФОРМАТА PNG или JPG)

Собираем проект и запускаем его.
Переходим по ссылке http://localhost:8080/picture/4 и видим нашу картинку

Появилась проблема, после каждого добавления нового компонента, приложение при-
ходится пересобирать.
И подумав решили сделать следующим образом, что если все настройки всех наших
приложений соберем на некотором сервере и при запуске приложение будет обращаться к
этому серверу, запрашивать с него настройки, согласно им конфигурироваться. Таким образом
появилась идея одного из паттернов микросервесной архитектуры которая называется
ConfigurationServer.

Создадим с помощью SpringCloud такой сервер.
Создаем модуль spring-cloud-config
Выбираем в dependencies Spring Cloud, Config  и нажимаем finish;
Теперь нам нужно что бы данное приложение начало работать. Заходим в класс SpringCloudConfigApplication
и над ним прописываем @EnableConfigServer. Так мы говорим что хотим что бы данное приложение функци-
онировало как  Сервер конфигурации.
Идем в application.properties  и указываем порт на котором будет сервер открываться, и вторая конфигурация нужна
что бы указать откуда наш сервер будет брать настройки.
spring.cloud.config.server.git.uri=file://@project.basedir@/config-repository - это путь к папке config-repository
в той же папке что и наш конфигурационный сервер.Основных хранилищем для настроек конфигура-
ционного сервера является система контроля версий Git.
В этом репозитории будут находиться наши настройки, каждый раз когда мы хотим какую-то из этих
настроек поменять, делать туда commit. Конфигурационный сервер умеет автоматически
распозновать изменения в репозитории и на основании этого он будет перезапускать те сервисы
которых эти изменения касаются.

Создаем в нашем модуле spring-cloud-config папку config-repository.
Добавим в папку файл application.properties, в него скопируем настройум из
admin-ui.
Теперь нам необходимо папку config-repository превратить в отдельный Git репозиторий.
Идем в терминал, переходим в папку config-repository и дальше пишем
git init - инициализируем пустой репозиторий
git add . - добавляем все файлы
git commit -m "Init commit"
И у нас добавился файл application.properties.

Запускаем наш сервер конфигурации.
Каким образом этот сервер предоставляет приложения информацию о настройках?
Делает он это через RestApi.
Создадим в нашем модуле файл requests.http  и напишем в нем простой GET запрос.
GET http://localhost:8888/config/application.properties - путь для полученя настроек из файла
Запускаем данный запрос и получаем rest в котором находится json, в котором содержатся все
наши настройки из файла application.properties.

Если мы хотим что бы наши приложения которые обращаются к нашему серверу имели
одни и теже настройки, то нас устроит и такая конфигурация, но понятное дело что в реальности
все намного сложнее.
Spring Config Server умеет разделять информацию в зависимости от имени того или иного приложения.
Разные приложения могут получать разные файлы application.properties и мы можем иметь разные
наборы конфигураций. Стандартная структура пути она вот такая
 - http://localhost:8888/config/application.properties

 Теперь научим приложение shop-picture-service-app получать информацию из
 сервера конфигурации.
 Что для этого нам нужно?
 Идем в модуль shop-picture-service-app и удаляем там файл application.properties.
 И вместо него мы создаем файл который называктся bootstrap.properties.
 Прописываем в этом файле
 как наше приложение будет называться?
 url того конфиг сервера который мы хотим использовать.

 Что бы приложение само могло слать запросы, идем в pom.xml  shop-picture-service-app и
 подключаем зависимость клиента:

         <dependency>
             <groupId>org.springframework.cloud</groupId>
             <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
         </dependency>


